// Extending Class
class AppError extends Error {
    constructor(message, statusCode) {
      super(message); // why we did'nt use this.massage? because we have given message directly to parent class, it will auto pick which ever error comes
      this.statusCode = statusCode;
      this.status = `${statusCode}`.startsWith("4") ? "fail" : "error";
      this.isOperational = true;
      // if we add this property in our error we can know that this is programming error, it will make it easy for us
      // to know that either it was generated by our code if it contains this object (isOperational) or some other error it is
      Error.captureStackTrace(this, this.constructor);
      // it is use to stack all the errors generated within AppError, actually its original is
      // console.log(err.stack); // to captyre where error occured
      // now this and this.AppError will only stack which errros occured in this called and wont stack other errors of function to aviod mixup of errors
      // video 115
    }
  }
  
  module.exports = AppError;
  
  // Making function middleWare
  module.exports = function errorController(err, req, res, next){
        // if status code or erro is not comming fro back use default values otherwise it will shwo eeor in html
        err.statusCode = err.status || 500
    err.message = err.message || 'not found anything'
     return res.status(err.statusCode).json({ message: err.message });
   };
  

   // use tehse at end of app before app.listen()
  // In App.js
  let AppError = require("./Utils/Errorclass");
  app.all("*", (req, res, next) => {
    next(new AppError(`This route ${req.originalUrl} not found`, 404));
  });
  

  app.use(errorController) // will pass here to this fucntiona nd it will throw it

  //Could use like this too
  // this middlware will work for all either router or anything async error just use this middleware at end and it will take error from enxt and throw from here
  app.use((err, req, res, next) => {
    // if status code or erro is not comming fro back use default values otherwise it will shwo eeor in html
        err.statusCode = err.status || 500 // mongo never returns status code so chances are error will occur, give default value or throw in error class
    err.message = err.message || 'not found anything'
    //must use next here other will it will throw error in html, as express will consider next middleware sa normal middleware not err middlware
    return res.status(err.code).json({ message: err.message });
  });
  