class AppError extends Error {
  constructor(message, statusCode) {
    super(message); // why we did'nt use this.massage? because we have given message directly to parent class, it will auto pick which ever error comes
    this.statusCode = statusCode;
    this.status = `${statusCode}`.startsWith("4") ? "fail" : "error";
    this.isOperational = true;
    // if we add this property in our error we can know that this is programming error, it will make it easy for us
    // to know that either it was generated by our code if it contains this object (isOperational) or some other error it is
    Error.captureStackTrace(this, this.constructor);
    // it is use to stack all the errors generated within AppError, actually its original is
    // console.log(err.stack); // to captyre where error occured
    // now this and this.AppError will only stack which errros occured in this called and wont stack other errors of function to aviod mixup of errors
    // video 115
  }
}

module.exports = AppError;
